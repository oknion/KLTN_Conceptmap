package com.oknion.conceptmap.Model;

// Generated Dec 18, 2014 9:52:00 AM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

//import org.codehaus.jackson.annotate.JsonIgnore;
//import org.codehaus.jackson.annotate.JsonProperty;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Ccrelationship generated by hbm2java
 */
@Entity
@Table(name = "ccrelationship")
public class Ccrelationship implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer ccrelaId;
	private Conceptmap conceptmap;
	private double from;
	private String text;
	private double to;
	private Set<Document> documents = new HashSet<Document>(0);
	private Set<CcrelationshipPoints> ccrelationshipPointses = new HashSet<CcrelationshipPoints>(
			0);

	private Double[] points;

	@JsonIgnore
	public Concept fromConcept;
	@JsonIgnore
	public Concept toConcept;
	@JsonIgnore
	public boolean checked = false;

	@Transient
	public Double[] getPoints() {
		return points;
	}

	public void setPoints(Double[] points) {
		this.points = points;
	}

	public Ccrelationship() {
	}

	public Ccrelationship(Conceptmap conceptmap, double from, double to) {
		this.conceptmap = conceptmap;
		this.from = from;
		this.to = to;
	}

	public Ccrelationship(Conceptmap conceptmap, double from, String text,
			double to, Set<Document> documents,
			Set<CcrelationshipPoints> ccrelationshipPointses) {
		this.conceptmap = conceptmap;
		this.from = from;
		this.text = text;
		this.to = to;
		this.documents = documents;
		this.ccrelationshipPointses = ccrelationshipPointses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ccrelaId", unique = true, nullable = false)
	@JsonIgnore
	public Integer getCcrelaId() {
		return this.ccrelaId;
	}

	public void setCcrelaId(Integer ccrelaId) {
		this.ccrelaId = ccrelaId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "cmId", nullable = false)
	@JsonIgnore
	public Conceptmap getConceptmap() {
		return this.conceptmap;
	}

	public void setConceptmap(Conceptmap conceptmap) {
		this.conceptmap = conceptmap;
	}

	@Column(name = "srcCcId", nullable = false, precision = 22, scale = 0)
	@JsonProperty("from")
	public double getFrom() {
		return this.from;
	}

	public void setFrom(double from) {
		this.from = from;
	}

	@Column(name = "text")
	public String getText() {
		return this.text;
	}

	public void setText(String text) {
		this.text = text;
	}

	@Column(name = "desCcIdr", nullable = false, precision = 22, scale = 0)
	@JsonProperty("to")
	public double getTo() {
		return this.to;
	}

	public void setTo(double to) {
		this.to = to;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "ccrelationship")
	@JsonIgnore
	@Cascade({ CascadeType.ALL,
			org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	public Set<Document> getDocuments() {
		return this.documents;
	}

	public void setDocuments(Set<Document> documents) {
		this.documents = documents;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "ccrelationship")
	@JsonIgnore
	@Cascade({ CascadeType.ALL,
			org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	public Set<CcrelationshipPoints> getCcrelationshipPointses() {
		return this.ccrelationshipPointses;
	}

	public void setCcrelationshipPointses(
			Set<CcrelationshipPoints> ccrelationshipPointses) {
		this.ccrelationshipPointses = ccrelationshipPointses;
	}

}
