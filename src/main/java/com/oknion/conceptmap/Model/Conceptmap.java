package com.oknion.conceptmap.Model;

// Generated Oct 21, 2014 3:41:47 PM by Hibernate Tools 4.0.0

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

//import org.codehaus.jackson.annotate.JsonIgnore;
//import org.codehaus.jackson.annotate.JsonProperty;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Type;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Conceptmap generated by hbm2java
 */
@Entity
@Table(name = "conceptmap")
public class Conceptmap implements java.io.Serializable {

	private Integer cmId;
	private Task task;
	private User user;
	private Date dateCreate;
	private String description;
	private Boolean isPublic;
	private Date lastUpdate;
	private String name;
	private String cmName;
	private String cmSessionTempId;

	private Short score;
	private Set<Error> errors = new HashSet<Error>(0);

	private Set<Concept> concepts = new HashSet<Concept>(0);
	private Set<Sharewith> sharewiths = new HashSet<Sharewith>(0);
	private Set<Task> tasks = new HashSet<Task>(0);
	private Set<Ccrelationship> ccrelationships = new HashSet<Ccrelationship>(0);
	private String imgString;

	private Integer taskId;

	@Transient
	public Integer getTaskId() {
		return taskId;
	}

	public void setTaskId(Integer taskId) {
		this.taskId = taskId;
	}

	@Type(type = "text")
	@Column(name = "imgString")
	public String getImgString() {
		return imgString;
	}

	public void setImgString(String imgString) {
		this.imgString = imgString;
	}

	public Conceptmap() {
	}

	public Conceptmap(User user, String description, String name) {
		this.user = user;
		this.description = description;
		this.name = name;
	}

	public Conceptmap(Task task, User user, Date dateCreate,
			String description, Boolean isPublic, Date lastUpdate, String name,
			Short score, Set<Error> errors, Set<Concept> concepts,
			Set<Sharewith> sharewiths, Set<Task> tasks,
			Set<Ccrelationship> ccrelationships) {
		this.task = task;
		this.user = user;
		this.dateCreate = dateCreate;
		this.description = description;
		this.isPublic = isPublic;
		this.lastUpdate = lastUpdate;
		this.name = name;
		this.score = score;
		this.errors = errors;
		this.concepts = concepts;
		this.sharewiths = sharewiths;
		this.tasks = tasks;
		this.ccrelationships = ccrelationships;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "cmId", unique = true, nullable = false)
	public Integer getCmId() {
		return this.cmId;
	}

	public void setCmId(Integer cmId) {
		this.cmId = cmId;
	}

	@ManyToOne
	@JoinColumn(name = "answer4task")
	@JsonIgnore
	public Task getTask() {
		return this.task;
	}

	public void setTask(Task task) {
		this.task = task;
	}

	@Transient
	public String getCmSessionTempId() {
		return cmSessionTempId;
	}

	public void setCmSessionTempId(String cmSessionTempId) {
		this.cmSessionTempId = cmSessionTempId;
	}

	@ManyToOne
	@JoinColumn(name = "userId", nullable = false)
	@JsonIgnore
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "dateCreate", length = 19)
	@JsonIgnore
	public Date getDateCreate() {
		return this.dateCreate;
	}

	public void setDateCreate(Date dateCreate) {
		this.dateCreate = dateCreate;
	}

	@JsonProperty("description")
	@Column(name = "description", nullable = false)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "isPublic")
	@JsonIgnore
	public Boolean getIsPublic() {
		return this.isPublic;
	}

	public void setIsPublic(Boolean isPublic) {
		this.isPublic = isPublic;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "lastUpdate", length = 19)
	@JsonIgnore
	public Date getLastUpdate() {
		return this.lastUpdate;
	}

	public void setLastUpdate(Date lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	@JsonProperty("class")
	@Column(name = "name", nullable = false, length = 50)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@JsonProperty("cmName")
	public String getCmName() {
		return cmName;
	}

	public void setCmName(String cmName) {
		this.cmName = cmName;
	}

	@Column(name = "score")
	@JsonIgnore
	public Short getScore() {
		return this.score;
	}

	public void setScore(Short score) {
		this.score = score;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "conceptmap")
	@JsonIgnore
	@Cascade({ CascadeType.ALL,
			org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	public Set<Error> getErrors() {
		return this.errors;
	}

	public void setErrors(Set<Error> errors) {
		this.errors = errors;
	}

	@SuppressWarnings("deprecation")
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "conceptmap")
	@JsonProperty("nodeDataArray")
	@Cascade({ CascadeType.ALL,
			org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	public Set<Concept> getConcepts() {
		return this.concepts;
	}

	public void setConcepts(Set<Concept> concepts) {
		this.concepts = concepts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "conceptmap")
	@JsonIgnore
	@Cascade({ CascadeType.ALL,
			org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	public Set<Sharewith> getSharewiths() {
		return this.sharewiths;
	}

	public void setSharewiths(Set<Sharewith> sharewiths) {
		this.sharewiths = sharewiths;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "conceptmap")
	@JsonIgnore
	@Cascade({ CascadeType.ALL })
	public Set<Task> getTasks() {
		return this.tasks;
	}

	public void setTasks(Set<Task> tasks) {
		this.tasks = tasks;
	}

	@SuppressWarnings("deprecation")
	@OneToMany(orphanRemoval = true, fetch = FetchType.LAZY, mappedBy = "conceptmap")
	@JsonProperty("linkDataArray")
	@Cascade({ CascadeType.ALL,
			org.hibernate.annotations.CascadeType.DELETE_ORPHAN })
	public Set<Ccrelationship> getCcrelationships() {
		return this.ccrelationships;
	}

	public void setCcrelationships(Set<Ccrelationship> ccrelationships) {
		this.ccrelationships = ccrelationships;
	}

}
